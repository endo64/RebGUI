#[object! [
    frame: #[none]
    points: [
        line 1 0.255.0 [965.148921773718 183.0 5962865651.67796 1130607297.62997] 
        line 1 0.0.255 [183.0 183.0 5962865651.67796 5962865651.67796] 
        line 1 255.0.0 [183.0 506.753218822833 2153325077.62238 5962865651.67796] 
        point 4 blue [[price base 4] 2853.25446272995 541.0 [price base 5] 2854.48698643972 395.0 [price base 6] 2857.52883723336 183.0 [price base 7] 2153325077.62238 2153284672.0 [price base 8] 2868.75730829496 7944.0 [price base 9] 2868.75730829496 7944.0 [price base 10] 2868.67799852042 45699.0 [price base 11] 2879.40822136595 4464.0 [price base 12] 10612.1097413455 10314.0 [price base 13] 2884.26777289161 9326.0] 
        visible-points [[price base 4] [price base 5] [price base 6] [price base 7] [price base 8] [price base 9] [price base 10] [price base 11] [price base 12] [price base 13]] 
        points-colors []
    ]
    settings: [
        graph xyplot 
        grid 10x10 0.0.0.128 
        hilite-points 
        shadows 
        graph-pan 
        tool-tip-coords 
        cross-hair 
        cross-hair-color red 
        x-label "Should-Cost" 
        y-label "Actual Price" 
        point-over-color cyan 
        point-select-color 0.160.0 
        graph-zoom 
        x-min -100 
        x-max 100 
        y-min -80 
        y-max 60 
        quadratic-ratio 
        data graph-points 
        point-action [
            use [marker] [
                disable-show _gui 
                i-graph/select-point 'all false 
                ctx-search/clear-search 
                foreach [point-pos point-id point-data] matched-point [
                    log rejoin ["Matched point in graph: " point-id] 
                    append-graph-point point-id
                ] 
                foreach [point-pos point-id point-data] adjacent-points [
                    log rejoin ["Adjacent point in graph: " point-id] 
                    append-graph-point point-id
                ] 
                set-set-marker g-set-data/data marker: ctx-search/search-result/1 
                select-base-rows g-set-data ctx-search/search-result 
                set-render-g-set-data g-set-data 
                if marker [g-set-data/go-to index? find extract g-set-data/data g-set-data/all-cols marker] 
                make-undo "Select Graph Points" none 
                make-dirty [g-set-potentials l-set-data] 
                update-faces 
                finish-undo
            ]
        ] 
        zoom-action [
            set in graph* 'frame i-graph/get-viewport-xy 
            set-undo 'graphs 
            make-undo "Set Graph Zoom" coordinate-list *graph frame config-decimals 
            show-window graph-views-layout 
            show-window command-history-layout 
            finish-undo
        ] 
        pan-action [
            set in graph* 'frame i-graph/get-viewport-xy 
            set-undo 'graphs 
            make-undo "Set Graph Pan" coordinate-list *graph frame config-decimals 
            show-window graph-views-layout 
            show-window command-history-layout 
            finish-undo
        ] 
        tool-tip-action [
            use [abs-pot cost other-points max-overlap overlap overlaps row result] [
                overlap: make block! 100 
                max-overlap: 30 
                result: make block! [space 0x0] 
                foreach [point-pos point-id point-data] matched-point [
                    cost: get-costs point-id/3 
                    row: index? find sort extract g-set-data/data g-set-data/all-cols point-id/3 
                    abs-pot: pick *nlpp absolute-potential row 
                    if number? abs-pot [abs-pot: list-value abs-pot] 
                    append result compose [
                        text 28 (join texts/id ":") text (form id: point-id/3) return 
                        text 28 (join texts/product-type ":") text (select texts point-id/2) return 
                        text 28 (join texts/price-type ":") text (select texts point-id/1) return 
                        text 28 (join texts/price ":") text (list-value point-data/2) return 
                        text 28 (join texts/audit ":") text (either word? cost/10 [select texts cost/10] [list-value cost/10]) return 
                        text 28 (join texts/best-cost ":") text (list-value cost/7) return 
                        text 28 (join texts/should-cost ":") text (list-value cost/4) return 
                        text 28 (join texts/worst-cost ":") text (list-value cost/1) return 
                        text 28 (join texts/absolute-potential ":") text (form abs-pot) return 
                        text 28 (join texts/price-performance ":") text (list-value/pct point-data/1 / point-data/2)
                    ]
                ] 
                foreach [point-pos point-id point-data] adjacent-points [
                    append overlap point-id/3
                ] 
                return either empty? matched-point [
                    translate "No Point"
                ] [
                    either empty? adjacent-points [
                        result
                    ] [
                        overlaps: make string! 1000 
                        repeat i length? overlap [
                            repend overlaps [overlap/:i ", "] 
                            if all [i < length? overlap zero? i // 5] [append overlaps newline]
                        ] 
                        clear skip tail overlaps -2 
                        other-points: 
                        substitute 
                        translate "<points> adjacent <point>:" [points: length? overlap point: either 1 = length? overlap ["point"] ["points"]] 
                        append result compose [return text 28 (other-points) text (overlaps)]
                    ]
                ]
            ]
        ]
    ]
]]